### 회원 가입 (USER)
POST {{baseUrl}}{{signUpEndPoint}}
Content-Type: application/json

{
  "loginId": "test1",
  "password": "test1",
  "name": "test1",
  "role": "USER"
}

> {%
    client.global.set("userLoginId", response.body.loginId)
%}

### 회원 가입 (ADMIN)
POST {{baseUrl}}{{signUpEndPoint}}
Content-Type: application/json

{
  "loginId": "test2",
  "password": "test2",
  "name": "test2",
  "role": "ADMIN"
}

### 로그인 (USER)
POST {{baseUrl}}{{loginEndPoint}}
Content-Type: application/json

{
  "loginId": "test1",
  "password": "test1"
}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'");
        client.assert(response.body.accessToken.trim().length > 0);
        client.assert(response.body.refreshToken.trim().length > 0);
    });

    client.global.set("userAccessToken", response.body.accessToken)
    client.global.set("userRefreshToken", response.body.refreshToken)
%}

### 로그인 (ADMIN)
POST {{baseUrl}}{{loginEndPoint}}
Content-Type: application/json

{
  "loginId": "test2",
  "password": "test2"
}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'");
        client.assert(response.body.accessToken.trim().length > 0);
        client.assert(response.body.refreshToken.trim().length > 0);
    });

    client.global.set("adminAccessToken", response.body.accessToken)
    client.global.set("adminRefreshToken", response.body.refreshToken)
%}

### 회원 목록 (USER)
GET {{baseUrl}}{{usersEndPoint}}
Authorization: Bearer {{userAccessToken}}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 403, "Response status is not 403");
    });
%}

### 회원 목록 (ADMIN)
GET {{baseUrl}}{{usersEndPoint}}
Authorization: Bearer {{adminAccessToken}}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'");
        client.assert(response.body.users.length > 0);
    });
%}

### 회원 정보
GET {{baseUrl}}{{userInfoEndPoint}}/{{userLoginId}}
Authorization: Bearer {{userAccessToken}}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'");
        client.assert(response.body.loginId.trim().length > 0);
        client.assert(response.body.loginId.trim() == client.global.get("userLoginId"), "loginId does not match");
        client.assert(response.body.name.trim().length > 0);
    });
%}

### 회원 정보 수정
PUT {{baseUrl}}{{changeUserInfoEndPoint}}
Content-Type: application/json
Authorization: Bearer {{userAccessToken}}

{
  "name": "test123"
}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'");
        client.assert(response.body.loginId.trim().length > 0);
        client.assert(response.body.loginId.trim() == client.global.get("userLoginId"), "loginId does not match");
        client.assert(response.body.name.trim().length > 0);
        client.assert(response.body.name.trim() == "test123", "name does not match");
    });
%}

### 토큰 리프레쉬 (USER)
POST {{baseUrl}}{{refreshEndPoint}}
Content-Type: application/json
Authorization: Bearer {{userAccessToken}}

{
  "refreshToken": "{{userRefreshToken}}"
}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'");
        client.assert(response.body.accessToken.trim().length > 0);
        client.assert(response.body.refreshToken.trim().length > 0);
    });

    client.global.set("adminAccessToken", response.body.accessToken)
    client.global.set("adminRefreshToken", response.body.refreshToken)
%}

### 로그아웃 (USER)
POST {{baseUrl}}{{logoutEndPoint}}
Authorization: Bearer {{userAccessToken}}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### 회원 탈퇴 (USER)
DELETE {{baseUrl}}{{withdrawEndPoint}}
Authorization: Bearer {{userAccessToken}}

> {%
    client.test("Validate", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body == true);
    });
%}
